// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using news.domain.Contexts;

#nullable disable

namespace news.domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250510152851_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("news.domain.Entities.New", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("texto");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("titulo");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("usuarioid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("noticia");
                });

            modelBuilder.Entity("news.domain.Entities.NewTag", b =>
                {
                    b.Property<long>("NewId")
                        .HasColumnType("bigint")
                        .HasColumnName("noticiaid");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tagid");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.HasKey("NewId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("noticiatag");
                });

            modelBuilder.Entity("news.domain.Entities.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("descricao");

                    b.HasKey("Id");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("news.domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("nome");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("senha");

                    b.HasKey("Id");

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("news.domain.Entities.New", b =>
                {
                    b.HasOne("news.domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("news.domain.Entities.NewTag", b =>
                {
                    b.HasOne("news.domain.Entities.New", "New")
                        .WithMany("NewTags")
                        .HasForeignKey("NewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("news.domain.Entities.Tag", "Tag")
                        .WithMany("NewsTag")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("New");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("news.domain.Entities.New", b =>
                {
                    b.Navigation("NewTags");
                });

            modelBuilder.Entity("news.domain.Entities.Tag", b =>
                {
                    b.Navigation("NewsTag");
                });
#pragma warning restore 612, 618
        }
    }
}
